/*
Copyright 2019 Rancher Labs.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v3

import (
	"context"
	"time"

	v3 "github.com/rancher/rio/pkg/apis/management.cattle.io/v3"
	clientset "github.com/rancher/rio/pkg/generated/clientset/versioned/typed/management.cattle.io/v3"
	informers "github.com/rancher/rio/pkg/generated/informers/externalversions/management.cattle.io/v3"
	listers "github.com/rancher/rio/pkg/generated/listers/management.cattle.io/v3"
	"github.com/rancher/wrangler/pkg/generic"
	"k8s.io/apimachinery/pkg/api/equality"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type SettingHandler func(string, *v3.Setting) (*v3.Setting, error)

type SettingController interface {
	generic.ControllerMeta
	SettingClient

	OnChange(ctx context.Context, name string, sync SettingHandler)
	OnRemove(ctx context.Context, name string, sync SettingHandler)
	Enqueue(name string)
	EnqueueAfter(name string, duration time.Duration)

	Cache() SettingCache
}

type SettingClient interface {
	Create(*v3.Setting) (*v3.Setting, error)
	Update(*v3.Setting) (*v3.Setting, error)

	Delete(name string, options *metav1.DeleteOptions) error
	Get(name string, options metav1.GetOptions) (*v3.Setting, error)
	List(opts metav1.ListOptions) (*v3.SettingList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v3.Setting, err error)
}

type SettingCache interface {
	Get(name string) (*v3.Setting, error)
	List(selector labels.Selector) ([]*v3.Setting, error)

	AddIndexer(indexName string, indexer SettingIndexer)
	GetByIndex(indexName, key string) ([]*v3.Setting, error)
}

type SettingIndexer func(obj *v3.Setting) ([]string, error)

type settingController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.SettingsGetter
	informer          informers.SettingInformer
	gvk               schema.GroupVersionKind
}

func NewSettingController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.SettingsGetter, informer informers.SettingInformer) SettingController {
	return &settingController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromSettingHandlerToHandler(sync SettingHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v3.Setting
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v3.Setting))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *settingController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v3.Setting))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateSettingDeepCopyOnChange(client SettingClient, obj *v3.Setting, handler func(obj *v3.Setting) (*v3.Setting, error)) (*v3.Setting, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *settingController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *settingController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *settingController) OnChange(ctx context.Context, name string, sync SettingHandler) {
	c.AddGenericHandler(ctx, name, FromSettingHandlerToHandler(sync))
}

func (c *settingController) OnRemove(ctx context.Context, name string, sync SettingHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromSettingHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *settingController) Enqueue(name string) {
	c.controllerManager.Enqueue(c.gvk, c.informer.Informer(), "", name)
}

func (c *settingController) EnqueueAfter(name string, duration time.Duration) {
	c.controllerManager.EnqueueAfter(c.gvk, c.informer.Informer(), "", name, duration)
}

func (c *settingController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *settingController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *settingController) Cache() SettingCache {
	return &settingCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *settingController) Create(obj *v3.Setting) (*v3.Setting, error) {
	return c.clientGetter.Settings().Create(obj)
}

func (c *settingController) Update(obj *v3.Setting) (*v3.Setting, error) {
	return c.clientGetter.Settings().Update(obj)
}

func (c *settingController) Delete(name string, options *metav1.DeleteOptions) error {
	return c.clientGetter.Settings().Delete(name, options)
}

func (c *settingController) Get(name string, options metav1.GetOptions) (*v3.Setting, error) {
	return c.clientGetter.Settings().Get(name, options)
}

func (c *settingController) List(opts metav1.ListOptions) (*v3.SettingList, error) {
	return c.clientGetter.Settings().List(opts)
}

func (c *settingController) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.Settings().Watch(opts)
}

func (c *settingController) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v3.Setting, err error) {
	return c.clientGetter.Settings().Patch(name, pt, data, subresources...)
}

type settingCache struct {
	lister  listers.SettingLister
	indexer cache.Indexer
}

func (c *settingCache) Get(name string) (*v3.Setting, error) {
	return c.lister.Get(name)
}

func (c *settingCache) List(selector labels.Selector) ([]*v3.Setting, error) {
	return c.lister.List(selector)
}

func (c *settingCache) AddIndexer(indexName string, indexer SettingIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v3.Setting))
		},
	}))
}

func (c *settingCache) GetByIndex(indexName, key string) (result []*v3.Setting, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	for _, obj := range objs {
		result = append(result, obj.(*v3.Setting))
	}
	return result, nil
}
