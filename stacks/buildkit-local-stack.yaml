kubernetes:
  manifest: |-
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: buildkit
      namespace: default
    spec:
      progressDeadlineSeconds: 600
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        matchLabels:
          app: buildkitd-dev
      strategy:
        rollingUpdate:
          maxSurge: 25%
          maxUnavailable: 25%
        type: RollingUpdate
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: buildkitd-dev
        spec:
          containers:
          - image: moby/buildkit:v0.5.1
            imagePullPolicy: IfNotPresent
            name: buildkitd
            ports:
            - containerPort: 8080
              protocol: TCP
            resources: {}
            securityContext:
              privileged: true
              procMount: Default
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /etc/buildkit/buildkitd.toml
              name: config
              subPath: buildkitd.toml
            {{- if eq "${RUNTIME}" "containerd" }}
            - mountPath: /var/lib/rancher
              name: rancher
            - mountPath: /run
              name: run
            - mountPath: /var/lib/buildkit
              name: data
            {{- end}}
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
          volumes:
          - configMap:
              defaultMode: 420
              name: buildkitd-config
            name: config
          {{- if eq "${RUNTIME}" "containerd" }}
          - hostPath:
              path: /var/lib/rancher
              type: Directory
            name: rancher
          - hostPath:
              path: /run
              type: Directory
            name: run
          - hostPath:
              path: /var/lib/buildkit
              type: DirectoryOrCreate
            name: data
          {{- end}}
    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: buildkitd-config
      namespace: default
    data:
      buildkitd.toml: |
        {{- if eq "${RUNTIME}" "containerd" }}
        [grpc]
          address = [ "tcp://0.0.0.0:8080" ]
          # debugAddress is address for attaching go profiles and debuggers.
          debugAddress = "0.0.0.0:6060"

        [worker.oci]
          enabled = false

        [worker.containerd]
          address = "/run/k3s/containerd/containerd.sock"
          enabled = true
          platforms = [ "linux/amd64", "linux/arm64" ]
          namespace = "k8s.io"
          gc = true
          # gckeepstorage sets storage limit for default gc profile, in bytes.
          gckeepstorage = 9000

          [[worker.containerd.gcpolicy]]
            keepBytes = 512000000
            keepDuration = 172800 # in seconds
            filters = [ "type==source.local", "type==exec.cachemount", "type==source.git.checkout"]
          [[worker.containerd.gcpolicy]]
            all = true
            keepBytes = 1024000000
        {{- else}}
        [grpc]
          address = [ "tcp://0.0.0.0:8080" ]
          # debugAddress is address for attaching go profiles and debuggers.
          debugAddress = "0.0.0.0:6060"
        {{- end}}
    ---
    apiVersion: v1
    kind: Pod
    metadata:
      name: socat-socket
      namespace: default
    spec:
      containers:
      - command:
        - socat
        - TCP-LISTEN:9091,fork
        - UNIX-CONNECT:${SOCKET_ADDRESS}
        image: alpine/socat:1.0.3
        imagePullPolicy: IfNotPresent
        name: socat
        resources: {}
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: ${SOCKET_ADDRESS}
          name: sock
      volumes:
      - hostPath:
          path: ${SOCKET_ADDRESS}
          type: File
        name: sock

templates:
  questions:
    - variable: RUNTIME
    - variable: SOCKET_ADDRESS
