services:
  istio-pilot:
    disableServiceMesh: true
    labels:
      istio: pilot
    global_permissions:
    - '* config.istio.io/*'
    - '* networking.istio.io/*'
    - '* authentication.istio.io/*'
    - '* apiextensions.k8s.io/customresourcedefinitions'
    - '* extensions/ingresses'
    - '* extensions/ingresses/status'
    - rbac.istio.io/*
    - create,get,list,watch,update configmaps
    - endpoints
    - pods
    - services
    - namespaces
    - nodes
    - secrets
    containers:
    - name: discovery
      args:
      - discovery
      - --monitoringAddr=:15014
      - --domain
      - cluster.local
      - --secureGrpcAddr
      - ""
      - --keepaliveMaxServerConnectionAge
      - 30m
      configs:
      - mesh/meshConfig:/etc/istio/config/mesh
      ports:
      - 8080/http,http-legacy-discovery
      - 15010/grpc,grpc-xds
      - 15014/http,http-monitoring
      env:
      - POD_NAME=$(self/name)
      - POD_NAMESPACE=$(self/namespace)
      - PILOT_THROTTLE=500
      - PILOT_CACHE_SQUASH=5
      - PILOT_DISABLE_XDS_MARSHALING_TO_ANY=1
      - PILOT_TRACE_SAMPLING=100
      image: "istio/pilot:${TAG}"
      imagePullPolicy: always
      secrets: identity:/etc/certs
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /ready
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 5
    - name: istio-proxy
      ports:
      - 15011/https,https-xds
      image: "istio/proxyv2:${TAG}"
      imagePullPolicy: always
      args:
      - proxy
      - --domain
      - $(POD_NAMESPACE).svc.cluster.local
      - --serviceCluster
      - istio-pilot
      - --templateFile
      - /etc/istio/proxy/envoy_pilot.yaml.tmpl
      - --controlPlaneAuthPolicy
      - NONE
      env:
      - POD_NAME=$(self/name)
      - POD_NAMESPACE=$(self/namespace)
      - INSTANCE_IP=$(self/ip)
      secrets: identity:/etc/certs

  istio-citadel:
    disableServiceMesh: true
    image: "istio/citadel:${TAG}"
    args:
    - --append-dns-names=true
    - --grpc-port=8060
    - --grpc-hostname=citadel
    - --self-signed-ca=true
    - --monitoring-port=15014
    - --citadel-storage-namespace=${NAMESPACE}
    global_permissions:
    - write secrets
    - serviceaccounts
    - services
    permissions:
    - get,delete serviceaccounts
    - get,delete services
    - get,delete deployments
    - get,list,update,delete extensions/deployments
    - get,list,update,delete extensions/replicasets
    secrets: identity:/etc/certs

  istio-gateway:
    disableServiceMesh: true
    labels:
      "gateway": "external"
      "istio": "gateway"
    global_permissions:
    - "get,watch,list,update extensions/thirdpartyresources"
    - "get,watch,list,update */virtualservices"
    - "get,watch,list,update */destinationrules"
    - "get,watch,list,update */gateways"
    - secrets
    update_order: stop-first
    systemSpec:
      global: true
      deployment_strategy: Recreate
      podSpec:
        volumes:
        - name: secret-identity
          secret:
            defaultMode: 420
            optional: true
            secretName: istio.istio-gateway
        - name: ingressgatewaysdsudspath
          emptyDir: {}
        containers:
        - name: ingress-sds
          image: "istio/node-agent-k8s:${TAG}"
          imagePullPolicy: Always
          env:
          - name: "ENABLE_WORKLOAD_SDS"
            value: "false"
          - name: "ENABLE_INGRESS_GATEWAY_SDS"
            value: "true"
          - name: "INGRESS_GATEWAY_NAMESPACE"
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          volumeMounts:
            - name: ingressgatewaysdsudspath
              mountPath: /var/run/ingress_gateway
        - name: istio-proxy
          ports:
          - name: http2
            {{- if eq "${USE_HOSTPORT}" "true" }}
            hostPort: ${HTTP_PORT}
            {{- end}}
            containerPort: ${HTTP_PORT}
            protocol: TCP
          - name: https
            {{- if eq "${USE_HOSTPORT}" "true" }}
            hostPort: ${HTTPS_PORT}
            {{- end}}
            containerPort: ${HTTPS_PORT}
            protocol: TCP
          image: "istio/proxyv2:${TAG}"
          imagePullPolicy: Always
          args:
          - proxy
          - router
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --log_output_level
          - info
          - --drainDuration
          - '45s' #drainDuration
          - --parentShutdownDuration
          - '1m0s' #parentShutdownDuration
          - --connectTimeout
          - '10s' #connectTimeout
          - --serviceCluster
          - istio-gateway
          - --zipkinAddress
          - ""
          - --statsdUdpAddress
          - ""
          - --proxyAdminPort
          - "15000"
          - --statusPort
          - "15020"
          - --controlPlaneAuthPolicy
          - NONE
          - --discoveryAddress
          - istio-pilot:15010
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: HOST_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.hostIP
          - name: ISTIO_META_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: ISTIO_META_CONFIG_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: ISTIO_META_USER_SDS
            value: "true"
          volumeMounts:
          - mountPath: /etc/certs
            name: secret-identity
            readOnly: true
          - name: ingressgatewaysdsudspath
            mountPath: /var/run/ingress_gateway
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: 15020
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 2
            successThreshold: 1
            timeoutSeconds: 1

templates:
  questions:
    - variable: USE_HOSTPORT
      description: "whether to use hostPort"

